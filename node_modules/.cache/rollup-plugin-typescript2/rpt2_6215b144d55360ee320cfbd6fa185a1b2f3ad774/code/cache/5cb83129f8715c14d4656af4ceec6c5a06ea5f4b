{"code":"import * as cs from './languages/cs.json';\nimport * as en from './languages/en.json';\nimport * as es from './languages/es.json';\nimport * as fr from './languages/fr.json';\nimport * as it from './languages/it.json';\nimport * as nl from './languages/nl.json';\nimport * as pt_Br from './languages/pt-BR.json';\nimport * as zh_Hans from './languages/zh-Hans.json';\nvar languages = {\n    cs: cs,\n    en: en,\n    es: es,\n    fr: fr,\n    it: it,\n    nl: nl,\n    'pt-BR': pt_Br,\n    'zh-Hans': zh_Hans,\n};\nexport function localize(string, language, search = '', replace = '') {\n    const lang = language.replace(/['\"]+/g, '').replace('-', '_');\n    var translated;\n    try {\n        translated = string.split('.').reduce((o, i) => o[i], languages[lang]);\n    }\n    catch (e) {\n        translated = string.split('.').reduce((o, i) => o[i], languages['en']);\n    }\n    if (translated === undefined)\n        translated = string.split('.').reduce((o, i) => o[i], languages['en']);\n    if (search !== '' && replace !== '') {\n        if (!Array.isArray(search))\n            search = [search];\n        if (!Array.isArray(replace))\n            replace = [replace];\n        for (let i = 0; i < search.length; i++) {\n            translated = translated.replace(search[i], replace[i]);\n        }\n    }\n    return translated;\n}\n","references":["/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/cs.json","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/en.json","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/es.json","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/fr.json","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/it.json","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/nl.json","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/pt-BR.json","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/languages/zh-Hans.json"]}
