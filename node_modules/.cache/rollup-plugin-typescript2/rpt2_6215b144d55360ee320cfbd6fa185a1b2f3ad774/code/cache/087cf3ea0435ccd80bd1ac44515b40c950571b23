{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { fireEvent } from 'custom-card-helpers';\nimport { mdiArrowLeft, mdiPencil } from '@mdi/js';\nimport { localize } from './localize/localize';\nimport { maxButtonScale, minButtonScale, ActionToState, ArmActions, FORMAT_NUMBER, defaultCardConfig, } from './const';\nimport { calcSupportedActions } from './data/entity';\nimport { calcStateConfig } from './data/config';\nimport { pick, isEmpty, isDefined } from './helpers';\nimport { fetchEntities, fetchConfig } from './data/websockets';\nlet AlarmoCardEditor = class AlarmoCardEditor extends LitElement {\n    constructor() {\n        super(...arguments);\n        this._entities = null;\n        this._editAction = null;\n    }\n    async firstUpdated() {\n        fetchEntities(this.hass)\n            .then(res => {\n            this._entities = res.map(e => e.entity_id);\n        })\n            .catch(_e => {\n            var _a;\n            (_a = this.hass) === null || _a === void 0 ? void 0 : _a.callService('system_log', 'write', {\n                message: `Failed to fetch entities: ${_e}`,\n                level: 'error',\n            });\n        });\n        this._alarmoConfig = await fetchConfig(this.hass);\n    }\n    setConfig(config) {\n        if (!(config === null || config === void 0 ? void 0 : config.button_scale_actions) && (config === null || config === void 0 ? void 0 : config.button_scale))\n            //legacy: button_scale was replaced by button_scale_actions\n            config = Object.assign(Object.assign({}, config), { button_scale_actions: config === null || config === void 0 ? void 0 : config.button_scale });\n        if (!(config === null || config === void 0 ? void 0 : config.button_scale_keypad) && (config === null || config === void 0 ? void 0 : config.button_scale))\n            //legacy: button_scale was replaced by button_scale_keypad\n            config = Object.assign(Object.assign({}, config), { button_scale_keypad: config === null || config === void 0 ? void 0 : config.button_scale });\n        this._config = Object.assign(Object.assign({}, defaultCardConfig), config);\n    }\n    render() {\n        var _a, _b, _c;\n        if (!this._config || !this.hass || !this._entities)\n            return html ``;\n        if (!this._entities.length) {\n            return html `\n        <hui-warning>\n          Could not establish a connection with the alarmo integration. Please check if it is installed and running.\n        </hui-warning>\n      `;\n        }\n        const stateObj = this._config.entity ? this.hass.states[this._config.entity] : undefined;\n        const hasKeypad = ((_a = this._alarmoConfig) === null || _a === void 0 ? void 0 : _a.code_format) === FORMAT_NUMBER &&\n            (this._alarmoConfig.code_arm_required || this._alarmoConfig.code_disarm_required);\n        if (this._editAction !== null) {\n            const stateConfig = calcStateConfig(ActionToState[this._editAction], this._config);\n            return html `\n        <div class=\"header\">\n          <div class=\"back-title\">\n            <ha-icon-button\n              .label=${this.hass.localize('ui.common.back')}\n              .path=${mdiArrowLeft}\n              @click=${this._goBack}\n            ></ha-icon-button>\n            <span slot=\"title\"\n              >${localize('editor.action_dialog.title', this.hass.language, '{action}', this.hass.localize(`ui.card.alarm_control_panel.${this._editAction}`))}</span\n            >\n          </div>\n        </div>\n\n        <div class=\"checkbox-item\">\n          <ha-checkbox\n            ?checked=${!stateConfig.hide}\n            ?disabled=${(!stateConfig.hide &&\n                calcSupportedActions(stateObj)\n                    .map(e => ActionToState[e])\n                    .filter(e => !calcStateConfig(e, this._config).hide).length == 1) ||\n                this._editAction == ArmActions.Disarm}\n            @change=${(ev) => this._updateStateConfig(ActionToState[this._editAction], ev.target.checked ? { hide: undefined } : { hide: true })}\n          >\n          </ha-checkbox>\n          <span\n            @click=${(ev) => {\n                const checkbox = ev.target.previousElementSibling;\n                checkbox.click();\n                checkbox.blur();\n            }}\n          >\n            ${localize('editor.action_dialog.show_button', this.hass.language)}\n          </span>\n        </div>\n\n        <div class=\"grid\">\n          <ha-textfield\n            label=\"${localize('editor.action_dialog.button_label', this.hass.language)}\"\n            .value=\"${stateConfig.button_label || ''}\"\n            placeholder=\"${this.hass.localize(`ui.card.alarm_control_panel.${this._editAction}`)}\"\n            ?disabled=${stateConfig.hide}\n            @input=${(ev) => this._updateStateConfig(ActionToState[this._editAction], {\n                button_label: String(ev.target.value).trim(),\n            })}\n          ></ha-textfield>\n          \n          <ha-textfield\n            label=\"${localize('editor.action_dialog.button_icon', this.hass.language)}\"\n            .value=\"${stateConfig.button_icon || ''}\"\n            placeholder=\"mdi:shield-home\"\n            ?disabled=${stateConfig.hide}\n            @input=${(ev) => this._updateStateConfig(ActionToState[this._editAction], {\n                button_icon: String(ev.target.value).trim(),\n            })}\n          ></ha-textfield>\n\n          <ha-textfield\n            label=\"${localize('editor.action_dialog.state_label', this.hass.language)}\"\n            .value=\"${stateConfig.state_label || ''}\"\n            placeholder=\"${this.hass.localize(`component.alarm_control_panel.entity_component._.state.${ActionToState[this._editAction]}`)}\"\n            @input=${(ev) => this._updateStateConfig(ActionToState[this._editAction], {\n                state_label: String(ev.target.value).trim(),\n            })}\n          ></ha-textfield>\n        </div>\n      `;\n        }\n        return html `\n      <div class=\"card-config\">\n        <div class=\"grid\">\n          <ha-entity-picker\n            .label=\"${this.hass.localize('ui.panel.lovelace.editor.card.generic.entity')} (${this.hass.localize('ui.panel.lovelace.editor.card.config.required')})\"\n            .hass=${this.hass}\n            .value=\"${this._config.entity || ''}\"\n            .includeDomains=${['alarm_control_panel']}\n            .entityFilter=${(e) => this._entities.includes(e.entity_id)}\n            @change=${(ev) => this._updateConfig('entity', ev.target.value)}\n            allow-custom-entity\n          ></ha-entity-picker>\n\n          <ha-textfield\n            .label=\"${this.hass.localize('ui.panel.lovelace.editor.card.generic.name')} (${this.hass.localize('ui.panel.lovelace.editor.card.config.optional')})\"\n            .value=\"${this._config.name || ''}\"\n            @input=${(ev) => this._updateConfig('name', String(ev.target.value).trim())}\n          ></ha-textfield>\n        </div>\n\n        ${stateObj\n            ? html `\n              <div class=\"config-item\">\n                <span>${localize('editor.available_actions', this.hass.language)}</span>\n              </div>\n              <div class=\"config-row checkbox-list\">\n                ${[...calcSupportedActions(stateObj), ArmActions.Disarm].map(e => {\n                const supportedStates = calcSupportedActions(stateObj).map(e => ActionToState[e]);\n                const isHidden = calcStateConfig(ActionToState[e], this._config).hide;\n                return html `\n                    <div class=\"checkbox-item ${isHidden ? 'disabled' : ''}\">\n                      <ha-checkbox\n                        ?checked=${!isHidden}\n                        ?disabled=${(!isHidden &&\n                    supportedStates.filter(el => !calcStateConfig(el, this._config).hide).length == 1) ||\n                    e == ArmActions.Disarm}\n                        @change=${(ev) => this._updateStateConfig(ActionToState[e], ev.target.checked ? { hide: undefined } : { hide: true })}\n                      >\n                      </ha-checkbox>\n                      <span\n                        @click=${(ev) => {\n                    const checkbox = ev.target.previousElementSibling;\n                    checkbox.click();\n                    checkbox.blur();\n                }}\n                      >\n                        ${this.hass.localize(`ui.card.alarm_control_panel.${e}`)}\n                      </span>\n                      <ha-icon-button\n                        .path=${mdiPencil}\n                        style=\"color: var(--secondary-text-color); --mdc-icon-button-size: 42px\"\n                        ?disabled=${calcStateConfig(ActionToState[e], this._config).hide}\n                        @click=${() => this._editActionClick(e)}\n                      >\n                      </ha-icon-button>\n                    </div>\n                  `;\n            })}\n              </div>\n            `\n            : ''}\n\n        <div class=\"grid\">\n          <ha-formfield .label=${localize('editor.button_scale_actions', this.hass.language)}>\n            <ha-slider\n              value=${this._config.button_scale_actions || 1}\n              @change=${(ev) => this._updateConfig('button_scale_actions', Number(ev.target.value))}\n              min=\"${minButtonScale}\"\n              max=\"${maxButtonScale}\"\n              step=\"0.1\"\n              pin\n            ></ha-slider>\n          </ha-formfield>\n\n          <ha-formfield .label=${localize('editor.button_scale_keypad', this.hass.language)}>\n            <ha-slider\n              value=${this._config.button_scale_keypad || 1}\n              @change=${(ev) => this._updateConfig('button_scale_keypad', Number(ev.target.value))}\n              min=\"${minButtonScale}\"\n              max=\"${maxButtonScale}\"\n              step=\"0.1\"\n              pin\n              ?disabled=${!stateObj || !hasKeypad}\n            ></ha-slider>\n          </ha-formfield>\n\n          <ha-formfield .label=${localize('editor.use_clear_icon', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.use_clear_icon}\n              @change=${(ev) => this._updateConfig('use_clear_icon', ev.target.checked)}\n              ?disabled=${!stateObj || !hasKeypad}\n            ></ha-switch\n          ></ha-formfield>\n\n          <ha-formfield .label=${localize('editor.show_messages', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.show_messages || !isDefined(this._config.show_messages)}\n              @change=${(ev) => this._updateConfig('show_messages', ev.target.checked)}\n            ></ha-switch\n          ></ha-formfield>\n\n          <ha-formfield .label=${localize('editor.keep_keypad_visible', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.keep_keypad_visible}\n              @change=${(ev) => this._updateConfig('keep_keypad_visible', ev.target.checked)}\n              ?disabled=${!stateObj ||\n            !hasKeypad ||\n            ((_b = this._alarmoConfig) === null || _b === void 0 ? void 0 : _b.code_arm_required) == ((_c = this._alarmoConfig) === null || _c === void 0 ? void 0 : _c.code_disarm_required)}\n            ></ha-switch\n          ></ha-formfield>\n\n          <ha-formfield .label=${localize('editor.show_ready_indicator', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.show_ready_indicator}\n              @change=${(ev) => this._updateConfig('show_ready_indicator', ev.target.checked)}\n            ></ha-switch\n          ></ha-formfield>\n\n          <ha-formfield .label=${localize('editor.show_bypassed_sensors', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.show_bypassed_sensors}\n              @change=${(ev) => this._updateConfig('show_bypassed_sensors', ev.target.checked)}\n            ></ha-switch\n          ></ha-formfield>\n          \n          <ha-formfield .label=${localize('editor.show_code_inputfield', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.show_code_inputfield}\n              @change=${(ev) => this._updateConfig('show_code_inputfield', ev.target.checked)}\n            ></ha-switch>\n          </ha-formfield>\n          \n          <ha-formfield .label=${localize('editor.show_header', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.show_header}\n              @change=${(ev) => this._updateConfig('show_header', ev.target.checked)}\n            ></ha-switch>\n          </ha-formfield>\n          \n          <ha-formfield .label=${localize('editor.use_arm_button_icons', this.hass.language)}>\n            <ha-switch\n              .checked=${this._config.use_arm_button_icons}\n              @change=${(ev) => this._updateConfig('use_arm_button_icons', ev.target.checked)}\n            ></ha-switch>\n          </ha-formfield>\n\n          <ha-formfield></ha-formfield>\n        </div>\n      </div>\n    `;\n    }\n    _updateConfig(property, value) {\n        if (!this.hass)\n            return;\n        this._config = Object.assign(Object.assign({}, this._config), { [property]: value });\n        if (property == 'entity') {\n            const stateObj = this._config.entity ? this.hass.states[this._config.entity] : undefined;\n            if (!stateObj || stateObj.attributes.code_arm_required == stateObj.attributes.code_disarm_required)\n                this._config = Object.assign(Object.assign({}, this._config), { keep_keypad_visible: false });\n        }\n        fireEvent(this, 'config-changed', { config: this._config });\n    }\n    _updateStateConfig(state, config) {\n        var _a;\n        const removeUndefined = obj => pick(obj, Object.keys(obj).filter(e => !isEmpty(obj[e])));\n        let stateConfig = ((_a = this._config) === null || _a === void 0 ? void 0 : _a.states) || {};\n        const stateEntry = removeUndefined(Object.assign(Object.assign({}, stateConfig[state]), config));\n        stateConfig = removeUndefined(Object.assign(Object.assign({}, stateConfig), { [state]: stateEntry }));\n        this._updateConfig('states', stateConfig);\n    }\n    _editActionClick(action) {\n        this._editAction = action;\n    }\n    _goBack() {\n        this._editAction = null;\n    }\n    static get styles() {\n        return css `\n      div.config-row {\n        font-size: 16px;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: 12px;\n      }\n      div.config-item {\n        padding-top: 20px;\n      }\n      div.config-row > * {\n        display: flex;\n        align-items: center;\n      }\n      ha-textfield {\n        width: 100%;\n      }\n      div.grid {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: wrap;\n        gap: 20px 8px;\n      }\n      div.grid > * {\n        display: flex;\n        flex-direction: column;\n        flex: 1 0 300px;\n      }\n      div.checkbox-list {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: wrap;\n        gap: 0px 8px;\n      }\n      div.checkbox-item {\n        display: flex;\n        flex-direction: row;\n        flex: 1 0 300px;\n        font-size: 0.875rem;\n        align-items: center;\n      }\n      div.checkbox-item.disabled {\n        color: var(--disabled-text-color);\n      }\n      .checkbox-item span {\n        cursor: pointer;\n      }\n      .header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .back-title {\n        display: flex;\n        align-items: center;\n        font-size: 18px;\n      }\n    `;\n    }\n};\n__decorate([\n    property({ attribute: false })\n], AlarmoCardEditor.prototype, \"hass\", void 0);\n__decorate([\n    state()\n], AlarmoCardEditor.prototype, \"_config\", void 0);\n__decorate([\n    state()\n], AlarmoCardEditor.prototype, \"_alarmoConfig\", void 0);\n__decorate([\n    state()\n], AlarmoCardEditor.prototype, \"_entities\", void 0);\n__decorate([\n    state()\n], AlarmoCardEditor.prototype, \"_editAction\", void 0);\nAlarmoCardEditor = __decorate([\n    customElement('alarmo-card-editor')\n], AlarmoCardEditor);\nexport { AlarmoCardEditor };\n","references":["/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/lit/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/lit/decorators.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/custom-card-helpers/dist/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/@mdi/js/mdi.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/localize/localize.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/const.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/data/entity.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/data/config.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/helpers.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/home-assistant-js-websocket/dist/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/data/websockets.ts"]}
