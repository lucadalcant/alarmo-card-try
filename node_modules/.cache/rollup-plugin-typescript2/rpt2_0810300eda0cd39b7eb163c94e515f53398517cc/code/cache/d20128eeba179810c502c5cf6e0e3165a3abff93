{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { STATE_NOT_RUNNING } from 'home-assistant-js-websocket';\nimport { CARD_VERSION, FORMAT_NUMBER, defaultCardConfig, ActionToState, ArmActions, AlarmoEvents, AlarmStates, EVENT, defaultArmOptions, } from './const';\nimport './alarmo-card-editor';\nimport './components/alarmo-state-badge';\nimport './components/alarmo-sensor-badge';\nimport './components/alarmo-button';\nimport './components/alarmo-code-dialog';\nimport { SubscribeMixin } from './subscribe-mixin';\nimport { localize } from './localize/localize';\nimport { calcSupportedActions, computeStateDisplay, computeNameDisplay, codeRequired, computeStateColor, } from './data/entity';\nimport { calcStateConfig, validateConfig } from './data/config';\nimport { isEmpty } from './helpers';\nimport { fetchEntities, fetchConfig, fetchReadyToArmModes } from './data/websockets';\nimport { mdiDotsVertical } from '@mdi/js';\nimport { computeDomain } from './lib/compute-domain';\nimport { fireEvent } from './lib/fire-event';\nconst BUTTONS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '', '0', 'clear'];\nlet AlarmoCard = class AlarmoCard extends SubscribeMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        this._input = '';\n        this.warning = '';\n        this.area_id = undefined;\n        this.armOptions = Object.assign({}, defaultArmOptions);\n        this.readyForArmModes = null;\n        this.backendConnection = null;\n        this.showBypassedSensors = false;\n        this.subscribedEntities = [];\n        this._codeClearTimer = 0;\n    }\n    static async getConfigElement() {\n        await import('./alarmo-card-editor');\n        return document.createElement('alarmo-card-editor');\n    }\n    static async getStubConfig(hass) {\n        let defaultEntity = Object.keys(hass.states).find(e => computeDomain(e) == 'alarm_control_panel');\n        await fetchEntities(hass).then(res => {\n            const sorted = res.sort((a, b) => Number(a.area_id) - Number(b.area_id));\n            if (sorted.length)\n                defaultEntity = sorted[0].entity_id;\n        });\n        return {\n            type: `custom:alarmo-card`,\n            entity: defaultEntity,\n        };\n    }\n    async getCardSize() {\n        var _a;\n        if (!this._config || !this.hass)\n            return 9;\n        const stateObj = this.hass.states[this._config.entity];\n        if (!stateObj || ((_a = this._alarmoConfig) === null || _a === void 0 ? void 0 : _a.code_format) !== FORMAT_NUMBER)\n            return 4;\n        return (!codeRequired(stateObj) && !this._config.keep_keypad_visible || this._config.use_code_dialog) ? 4 : 9;\n    }\n    setConfig(config) {\n        if (!(config === null || config === void 0 ? void 0 : config.button_scale_actions) && (config === null || config === void 0 ? void 0 : config.button_scale))\n            //legacy: button_scale was replaced by button_scale_actions\n            config = Object.assign(Object.assign({}, config), { button_scale_actions: config === null || config === void 0 ? void 0 : config.button_scale });\n        if (!(config === null || config === void 0 ? void 0 : config.button_scale_keypad) && (config === null || config === void 0 ? void 0 : config.button_scale))\n            //legacy: button_scale was replaced by button_scale_keypad\n            config = Object.assign(Object.assign({}, config), { button_scale_keypad: config === null || config === void 0 ? void 0 : config.button_scale });\n        validateConfig(config);\n        this._config = Object.assign(Object.assign({}, defaultCardConfig), config);\n    }\n    hassSubscribe() {\n        return [\n            this.hass.connection.subscribeMessage(ev => this._fetchData(ev), { type: EVENT }),\n        ];\n    }\n    async firstUpdated() {\n        //load the checkbox element\n        const ch = await window.loadCardHelpers();\n        const c = await ch.createCardElement({ type: 'entities', entities: [] });\n        await c.constructor.getConfigElement();\n        await this.loadBackendConfig();\n    }\n    async loadBackendConfig() {\n        if (this.backendConnection)\n            return;\n        fetchEntities(this.hass)\n            .then(res => {\n            const match = res.find(e => e.entity_id == this._config.entity);\n            if (match)\n                this.area_id = match.area_id ? match.area_id : null;\n        })\n            .then(() => fetchConfig(this.hass))\n            .then(res => {\n            this._alarmoConfig = res;\n            this.backendConnection = true;\n        })\n            .then(() => fetchReadyToArmModes(this.hass, this._config.entity))\n            .then(res => {\n            this.readyForArmModes = res.modes;\n        })\n            .catch(_e => {\n            this.backendConnection = false;\n        });\n    }\n    async _fetchData(ev) {\n        if (ev.data.area_id !== this.area_id)\n            return;\n        switch (ev.data.event) {\n            case AlarmoEvents.Arm:\n                this._clearCode();\n                break;\n            case AlarmoEvents.Trigger:\n                break;\n            case AlarmoEvents.InvalidCodeProvided:\n            case AlarmoEvents.NoCodeProvided:\n                this._showCodeError();\n                this.subscribedEntities = [];\n                break;\n            case AlarmoEvents.FailedToArm:\n                this.warning = 'blocking_sensors';\n                this._last_command = ev.data.command;\n                this._last_code = this._input;\n                this._clearCode();\n                break;\n            case AlarmoEvents.CommandNotAllowed:\n                this._clearCode();\n                break;\n            case AlarmoEvents.TriggerTimeExpired:\n                break;\n            case AlarmoEvents.ReadyToArmModesChanged:\n                this.readyForArmModes = ev.data.modes;\n                break;\n        }\n    }\n    shouldUpdate(changedProps) {\n        if (changedProps.has('_config'))\n            return true;\n        const oldHass = changedProps.get('hass');\n        if (!oldHass ||\n            oldHass.themes !== this.hass.themes ||\n            oldHass.language !== this.hass.language ||\n            oldHass.config.state !== this.hass.config.state)\n            return true;\n        if (oldHass.states[this._config.entity] !== this.hass.states[this._config.entity]) {\n            const oldState = oldHass.states[this._config.entity];\n            const newState = this.hass.states[this._config.entity];\n            if (this.backendConnection === false)\n                (async () => await this.loadBackendConfig())();\n            this.processStateUpdate(oldState, newState);\n            return true;\n        }\n        if (this.subscribedEntities.length) {\n            if (this.subscribedEntities.some(e => oldHass.states[e] !== this.hass.states[e]))\n                return true;\n        }\n        return false;\n    }\n    processStateUpdate(oldState, newState) {\n        if (newState.state != oldState.state) {\n            //stop watching entities (blocking or triggered sensors)\n            this.subscribedEntities = [];\n        }\n        if (newState.state == AlarmStates.Disarmed) {\n            //wipe code in every card update (except InvalidCodeProvided/NoCodeProvided)\n            this._clearCode();\n        }\n        else if (newState.last_changed !== oldState.last_changed) {\n            //assume the state was changed although not detected\n            this._clearCode();\n        }\n    }\n    render() {\n        var _a, _b;\n        if (!this._config || !this.hass || this.backendConnection === null) {\n            return html ``;\n        }\n        const stateObj = this.hass.states[this._config.entity];\n        if (!stateObj) {\n            return html `\r\n        <hui-warning>\r\n          ${this.hass.config.state !== STATE_NOT_RUNNING\n                ? this.hass.localize('ui.panel.lovelace.warning.entity_not_found', 'entity', this._config.entity || '[empty]')\n                : this.hass.localize('ui.panel.lovelace.warning.starting')}\r\n        </hui-warning>\r\n      `;\n        }\n        if (this.backendConnection === false) {\n            return html `\r\n        <hui-warning>\r\n          Could not establish a connection with the alarmo integration. Please check if it is installed and the correct\r\n          entity is selected in the card settings.\r\n        </hui-warning>\r\n      `;\n        }\n        return html `\r\n      <ha-card>\r\n        ${stateObj.state === AlarmStates.Disarmed\n            ? html `\r\n              <ha-button-menu\r\n                corner=\"BOTTOM_START\"\r\n                multi\r\n                @action=${this._toggleArmOptions}\r\n                @click=${(ev) => ev.preventDefault()}\r\n              >\r\n                <ha-icon-button slot=\"trigger\" .label=${this.hass.localize('ui.common.menu')} .path=${mdiDotsVertical}>\r\n                </ha-icon-button>\r\n                <mwc-list-item noninteractive>\r\n                  <span class=\"title\">\r\n                    ${localize('arm_options.heading', this.hass.language)}\r\n                  </span>\r\n                </mwc-list-item>\r\n                <mwc-list-item graphic=\"icon\">\r\n                  <ha-icon\r\n                    slot=\"graphic\"\r\n                    icon=\"${this.armOptions.skip_delay ? 'mdi:check' : ''}\"\r\n                    @click=${(ev) => {\n                var _a;\n                (_a = ev.target.parentElement) === null || _a === void 0 ? void 0 : _a.click();\n                ev.stopPropagation();\n            }}\r\n                  ></ha-icon>\r\n                  ${localize('arm_options.skip_delay', this.hass.language)}\r\n                </mwc-list-item>\r\n                <mwc-list-item graphic=\"icon\">\r\n                  <ha-icon\r\n                    slot=\"graphic\"\r\n                    icon=\"${this.armOptions.force ? 'mdi:check' : ''}\"\r\n                    @click=${(ev) => {\n                var _a;\n                (_a = ev.target.parentElement) === null || _a === void 0 ? void 0 : _a.click();\n                ev.stopPropagation();\n            }}\r\n                  ></ha-icon>\r\n                  ${localize('arm_options.force', this.hass.language)}\r\n                </mwc-list-item>\r\n              </ha-button-menu>\r\n            `\n            : ''}\r\n\r\n        ${!this._config.show_header\n            ? html `\r\n              <div class=\"spacer\"></div>`\n            : html `\r\n              <div class=\"header\">\r\n                <div class=\"icon\">\r\n                  <alarmo-state-badge\r\n                    .hass=${this.hass}\r\n                    .entity=${this._config.entity}\r\n                    @click=${() => fireEvent(this, 'hass-more-info', { entityId: this._config.entity })}\r\n                    style=\"--alarm-state-color: ${computeStateColor(stateObj)}\"\r\n                  >\r\n                  </alarmo-state-badge>\r\n                </div>\r\n                <div class=\"summary\">\r\n                  <div class=\"name\">\r\n                    ${computeNameDisplay(stateObj, this._config)}\r\n                  </div>\r\n                  <div class=\"state\">\r\n                    ${computeStateDisplay(stateObj, this.hass.localize, this._config)}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n        `}\r\n\r\n        ${this._renderWarning()}\r\n\r\n        <div id=\"armActions\" class=\"actions\">\r\n          ${this._renderActions()}\r\n        </div>\r\n\r\n        ${(!codeRequired(stateObj) && !this._config.keep_keypad_visible) || this._config.use_code_dialog\n            ? html ``\n            : !this._config.show_code_inputfield\n                ? html ``\n                : html `\r\n              <ha-textfield\r\n                .value=${this._input}\r\n                .label=${this.hass.localize('ui.card.alarm_control_panel.code')}\r\n                ?disabled=${!codeRequired(stateObj)}\r\n                @input=${(ev) => {\n                    this._clearCodeError();\n                    this._input = ev.target.value;\n                    this._setCodeClearTimer();\n                }}\r\n                @focus=${this._clearCodeError}\r\n                type=\"password\"\r\n                id=\"code_input\"\r\n                .inputmode=${((_a = this._alarmoConfig) === null || _a === void 0 ? void 0 : _a.code_format) === FORMAT_NUMBER ? 'numeric' : 'text'}\r\n              ></ha-textfield>\r\n            `}\r\n        ${(!codeRequired(stateObj) && !this._config.keep_keypad_visible) ||\n            ((_b = this._alarmoConfig) === null || _b === void 0 ? void 0 : _b.code_format) !== FORMAT_NUMBER ||\n            this._config.use_code_dialog ||\n            this._config.hide_keypad\n            ? html ``\n            : html `\r\n          <div id=\"keypad\" style=\"max-width: ${this._config.button_scale_keypad * 300}px\">\r\n            ${BUTTONS.map(value => {\n                return value === ''\n                    ? html `\r\n              <alarmo-button\r\n                disabled\r\n                style=\"--content-scale: ${this._config.button_scale_keypad}\"\r\n                ?scaled=${this._config.button_scale_keypad != 1}\r\n              ></alarmo-button>\r\n            `\n                    : html `\r\n              <alarmo-button\r\n                .value=\"${value}\"\r\n                @click=${this._handlePadClick}\r\n                ?disabled=${!codeRequired(stateObj)}\r\n                class=\"${value !== 'clear' ? 'numberKey' : ''}\"\r\n                style=\"--content-scale: ${this._config.button_scale_keypad}\"\r\n                ?scaled=${this._config.button_scale_keypad != 1}\r\n              >\r\n                ${value === 'clear'\n                        ? this._config.use_clear_icon\n                            ? html `<ha-icon icon=\"hass:backspace-outline\"></ha-icon>`\n                            : html `<span>${this.hass.localize(`ui.card.alarm_control_panel.clear_code`)}</span>`\n                        : html ` <span>${value}</span>`}\r\n              </alarmo-button>\r\n            `;\n            })}\r\n          </div>\r\n        `}\r\n      </ha-card>\r\n    `;\n    }\n    _renderActions() {\n        if (!this.hass || !this._config)\n            return html ``;\n        const stateObj = this.hass.states[this._config.entity];\n        const actions = stateObj.state === AlarmStates.Disarmed\n            ? calcSupportedActions(stateObj).filter(e => !calcStateConfig(ActionToState[e], this._config).hide)\n            : [ArmActions.Disarm];\n        const showReadyStatus = this._config.show_ready_indicator;\n        return actions.map(action => {\n            var _a;\n            const stateConfig = calcStateConfig(ActionToState[action], this._config);\n            const readyStatus = Array.isArray(this.readyForArmModes) && this.readyForArmModes.includes(ActionToState[action]);\n            return html `\r\n        <alarmo-button\r\n          @click=${(ev) => this._handleActionClick(ev, action)}\r\n          style=\"--content-scale: ${this._config.button_scale_actions}\"\r\n          ?scaled=${this._config.button_scale_actions != 1}\r\n        >\r\n          ${showReadyStatus && action != ArmActions.Disarm\n                ? html `\r\n                <ha-icon\r\n                  icon=\"mdi:circle-medium\"\r\n                  style=\"${this.readyForArmModes === null\n                    ? `color: var(--label-badge-grey)`\n                    : readyStatus\n                        ? `color: var(--success-color)`\n                        : `color: var(--error-color)`}\"\r\n                  class=\"leading\"\r\n                ></ha-icon>\r\n              `\n                : ''}\r\n          ${isEmpty(stateConfig.button_label)\n                ? (((_a = this._config) === null || _a === void 0 ? void 0 : _a.use_arm_button_icons) && stateConfig.button_icon)\n                    ? html `\r\n                <ha-icon .icon=${stateConfig.button_icon}>\r\n                </ha-icon>\r\n                `\n                    : html `\r\n                <span>${this.hass.localize(`ui.card.alarm_control_panel.${action}`)}</span>\r\n              `\n                : html `\r\n                <span>${stateConfig.button_label}</span>\r\n              `}\r\n        </alarmo-button>\r\n      `;\n        });\n    }\n    _renderWarning() {\n        var _a;\n        if (!this.hass || !this._config || !this._config.show_messages)\n            return html ``;\n        const stateObj = this.hass.states[this._config.entity];\n        if ((stateObj.attributes.open_sensors && stateObj.state == AlarmStates.Triggered) ||\n            (this.warning == 'blocking_sensors' && stateObj.attributes.open_sensors)) {\n            return html `\r\n        <div class=\"messagebox\">\r\n          <div class=\"messagebox-left\"></div>\r\n          <div class=\"messagebox-inner\">\r\n            <div class=\"description\">\r\n              <div class=\"description-filler\"></div>\r\n              <span>\r\n                <ha-icon icon=\"hass:alert\"></ha-icon>\r\n                ${this.warning == 'blocking_sensors'\n                ? localize('errors.blocking_sensors', this.hass.language)\n                : localize('errors.triggered_sensors', this.hass.language)}\r\n              </span>\r\n              <div class=\"description-filler\"></div>\r\n            </div>\r\n            <div class=\"content\">\r\n              ${Object.entries(stateObj.attributes.open_sensors).map(([e]) => {\n                if (!this.subscribedEntities.includes(e))\n                    this.subscribedEntities.push(e);\n                return html `\r\n                  <div class=\"badge\">\r\n                    <alarmo-sensor-badge .hass=${this.hass} .entity=${e}> </alarmo-sensor-badge>\r\n                  </div>\r\n                `;\n            })}\r\n            </div>\r\n          ${this.warning == 'blocking_sensors' && stateObj.attributes.open_sensors\n                ? html `\r\n            <alarmo-button\r\n              @click=${this._forceRetryClick}\r\n              style=\"--content-scale: ${this._config.button_scale_actions}\"\r\n              ?scaled=${this._config.button_scale_actions != 1}\r\n            >\r\n              <span>${localize('arm_options.force', this.hass.language)}</span>\r\n            </alarmo-button>\r\n          ` : ''}\r\n          </div>\r\n          <div class=\"messagebox-right\"></div>\r\n        </div>\r\n      `;\n        }\n        if (stateObj.state.startsWith('armed_') &&\n            ((_a = stateObj.attributes.bypassed_sensors) === null || _a === void 0 ? void 0 : _a.length) &&\n            this._config.show_bypassed_sensors) {\n            return html `\r\n        <div class=\"messagebox warning\">\r\n          <div class=\"messagebox-left\"></div>\r\n          <div class=\"messagebox-inner\">\r\n            <div class=\"description\">\r\n              <div class=\"description-filler\"></div>\r\n              <span>\r\n                <ha-icon icon=\"hass:alert\"></ha-icon>\r\n                ${localize('errors.bypassed_sensors', this.hass.language)}\r\n              </span>\r\n              <div class=\"description-filler\"></div>\r\n            </div>\r\n            <div class=\"content\">\r\n              ${stateObj.attributes.bypassed_sensors.map(e => {\n                if (!this.subscribedEntities.includes(e))\n                    this.subscribedEntities.push(e);\n                return html `\r\n                  <div class=\"badge\">\r\n                    <alarmo-sensor-badge .hass=${this.hass} .entity=${e}> </alarmo-sensor-badge>\r\n                  </div>\r\n                `;\n            })}\r\n            </div>\r\n          </div>\r\n          <div class=\"messagebox-right\"></div>\r\n        </div>\r\n      `;\n        }\n        return html ``;\n    }\n    _handlePadClick(e) {\n        const val = e.currentTarget.value;\n        this._clearCodeError();\n        this._input = val === 'clear' ? '' : this._input + val;\n    }\n    async _handleActionClick(ev, action) {\n        var _a;\n        ev.target.blur();\n        this._clearCodeError();\n        const stateObj = this.hass.states[this._config.entity];\n        if (((_a = this._config) === null || _a === void 0 ? void 0 : _a.use_code_dialog) && !this._config.hide_keypad && codeRequired(stateObj)) {\n            const res = await new Promise(resolve => {\n                const element = ev.target;\n                const params = {\n                    code_format: this._alarmoConfig.code_format,\n                    area_id: this.area_id,\n                    entity_id: this._config.entity,\n                    action: action,\n                    armOptions: this.armOptions,\n                    cancel: () => {\n                        resolve(null);\n                    },\n                    confirm: (ev) => {\n                        resolve(ev);\n                    },\n                };\n                fireEvent(element, 'show-dialog', {\n                    dialogTag: 'alarmo-code-dialog',\n                    dialogImport: () => import('./components/alarmo-code-dialog'),\n                    dialogParams: params\n                });\n            });\n            if (res == AlarmoEvents.Arm || res == AlarmoEvents.Disarm) {\n                //(dis)arming successful\n                this.warning = '';\n                this.armOptions = Object.assign({}, defaultArmOptions);\n            }\n        }\n        else {\n            if (action == ArmActions.Disarm) {\n                this.hass.callService('alarmo', 'disarm', {\n                    entity_id: this._config.entity,\n                    code: this._input,\n                });\n            }\n            else {\n                this.hass.callService('alarmo', 'arm', Object.assign(Object.assign({}, this.armOptions), { entity_id: this._config.entity, mode: ActionToState[action], code: this._input }));\n            }\n            this._clearCode();\n            this.warning = '';\n            this.armOptions = Object.assign({}, defaultArmOptions);\n        }\n    }\n    _showCodeError() {\n        var _a;\n        const inputField = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('#code_input');\n        if (inputField) {\n            inputField.classList.remove('error');\n            inputField.classList.add('error');\n            inputField.invalid = true;\n        }\n    }\n    _clearCodeError() {\n        var _a;\n        const inputField = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('#code_input');\n        if (inputField && inputField.classList.contains('error')) {\n            inputField.classList.remove('error');\n            inputField.invalid = false;\n            this._input = '';\n            this._cancelCodeClearTimer();\n        }\n    }\n    _clearCode() {\n        this._input = '';\n        this._clearCodeError();\n        this._cancelCodeClearTimer();\n    }\n    _setCodeClearTimer() {\n        this._cancelCodeClearTimer();\n        if (this._input.length) {\n            this._codeClearTimer = window.setTimeout(() => {\n                this._clearCode();\n            }, 120000); //clear code after 120 sec inactivity\n        }\n    }\n    _cancelCodeClearTimer() {\n        if (this._codeClearTimer) {\n            clearTimeout(this._codeClearTimer);\n        }\n    }\n    _toggleArmOptions(ev) {\n        switch (ev.detail.index) {\n            case 0:\n                this.armOptions = Object.assign(Object.assign({}, this.armOptions), { skip_delay: !this.armOptions.skip_delay });\n                break;\n            case 1:\n                this.armOptions = Object.assign(Object.assign({}, this.armOptions), { force: !this.armOptions.force });\n                break;\n        }\n        ev.preventDefault();\n        const el = ev.target;\n        setTimeout(() => {\n            el.firstElementChild.blur();\n        }, 50);\n    }\n    _forceRetryClick() {\n        if (!this.hass || !this._config || !this._last_command)\n            return;\n        let action = this._last_command;\n        this.hass.callService('alarmo', 'arm', {\n            entity_id: this._config.entity,\n            mode: ActionToState[action],\n            code: this._last_code,\n            force: true,\n        });\n    }\n    static get styles() {\n        return css `\r\n      ha-card {\r\n        padding-bottom: 16px;\r\n        position: relative;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n      }\r\n      .header {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin: 0px auto;\r\n        padding: 20px 0px;\r\n        box-sizing: border-box;\r\n        gap: 20px;\r\n      }\r\n      .header .icon {\r\n        display: flex;\r\n      }\r\n      .header .summary {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 3px;\r\n      }\r\n      .header .name {\r\n        font-size: 24px;\r\n        display: flex;\r\n      }\r\n      .header .state {\r\n        font-size: 14px;\r\n        display: flex;\r\n      }\r\n      .spacer {\r\n        height: 8px;\r\n        margin: 0px auto;\r\n        box-sizing: border-box;\r\n      }\r\n      .actions {\r\n        margin: 0;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        justify-content: center;\r\n      }\r\n      .actions alarmo-button {\r\n        margin: 0 8px 8px;\r\n      }\r\n      ha-textfield {\r\n        margin: 8px auto;\r\n        max-width: 200px;\r\n        text-align: center;\r\n        margin-left: calc(50% - 200px / 2);\r\n        margin-right: calc(50% - 200px / 2);\r\n      }\r\n      ha-textfield.error {\r\n        animation: shake 0.2s ease-in-out 0s 2;\r\n      }\r\n      #keypad {\r\n        display: flex;\r\n        justify-content: center;\r\n        flex-wrap: wrap;\r\n        margin: auto;\r\n        width: 100%;\r\n        direction: ltr;\r\n      }\r\n      #keypad alarmo-button {\r\n        padding: 8px;\r\n        width: 30%;\r\n        box-sizing: border-box;\r\n      }\r\n      @keyframes shake {\r\n        0% {\r\n          margin-left: calc(50% - 200px / 2);\r\n        }\r\n        25% {\r\n          margin-left: calc(50% - 200px / 2 + 10px);\r\n        }\r\n        75% {\r\n          margin-left: calc(50% - 200px / 2 - 10px);\r\n        }\r\n        100% {\r\n          margin-left: calc(50% - 200px / 2);\r\n        }\r\n      }\r\n      div.messagebox {\r\n        width: 90%;\r\n        margin: 0px auto 20px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        align-items: stretch;\r\n        --border-color: var(--label-badge-red);\r\n      }\r\n      div.messagebox.warning {\r\n        --border-color: var(--label-badge-yellow);\r\n      }\r\n      div.messagebox.warning alarmo-sensor-badge {\r\n        --label-badge-red: var(--label-badge-yellow);\r\n      }\r\n      div.messagebox-left {\r\n        display: flex;\r\n        width: 10px;\r\n        border: 1px solid var(--border-color);\r\n        border-width: 1px 0px 1px 1px;\r\n        border-top-left-radius: 4px;\r\n        border-bottom-left-radius: 4px;\r\n      }\r\n      div.messagebox-right {\r\n        display: flex;\r\n        width: 10px;\r\n        border: 1px solid var(--border-color);\r\n        border-width: 1px 1px 1px 0px;\r\n        border-top-right-radius: 4px;\r\n        border-bottom-right-radius: 4px;\r\n      }\r\n      div.messagebox-inner {\r\n        flex-direction: column;\r\n        border-bottom: 1px solid var(--border-color);\r\n        flex: 1 1;\r\n      }\r\n      div.messagebox .description {\r\n        display: flex;\r\n        flex-direction: row;\r\n      }\r\n      div.messagebox .description span {\r\n        color: var(--label-badge-red);\r\n        font-weight: 500;\r\n        display: flex;\r\n        margin-top: -10px;\r\n        padding: 0px 5px;\r\n        flex-shrink: 2;\r\n      }\r\n      div.messagebox.warning .description span {\r\n        color: #d0863d;\r\n      }\r\n      div.messagebox .description-filler {\r\n        flex: 1;\r\n        border-top: 1px solid var(--border-color);\r\n        min-width: 5px;\r\n      }\r\n      div.messagebox .description ha-icon {\r\n        --mdc-icon-size: 24px;\r\n        margin: 0px 4px 0px 0px;\r\n      }\r\n      div.messagebox .content {\r\n        display: flex;\r\n        flex-basis: 100%;\r\n        padding: 5px;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        flex: 1;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n        color: var(--primary-text-color);\r\n      }\r\n      div.messagebox .content .badge {\r\n        width: 64px;\r\n        margin: 5px 0px;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n      div.messagebox alarmo-button {\r\n        display: flex;\r\n        justify-self: center;\r\n        margin-bottom: 10px;\r\n      }\r\n      ha-button-menu {\r\n        position: absolute;\r\n        right: 4px;\r\n        top: 4px;\r\n      }\r\n      mwc-list-item {\r\n        --mdc-theme-secondary: var(--primary-color);\r\n        --mdc-list-item-graphic-margin: 16px;\r\n      }\r\n      mwc-list-item .title {\r\n        font-weight: 500;\r\n        font-size: 1.1em;\r\n      }\r\n    `;\n    }\n};\n__decorate([\n    property({ attribute: false })\n], AlarmoCard.prototype, \"hass\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"_config\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"_alarmoConfig\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"_input\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"warning\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"area_id\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"armOptions\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"readyForArmModes\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"backendConnection\", void 0);\n__decorate([\n    state()\n], AlarmoCard.prototype, \"showBypassedSensors\", void 0);\nAlarmoCard = __decorate([\n    customElement('alarmo-card')\n], AlarmoCard);\nexport { AlarmoCard };\nwindow.customCards = window.customCards || [];\nwindow.customCards.push({\n    type: 'alarmo-card',\n    name: 'Alarmo Card',\n    description: 'Card for operating Alarmo through Lovelace.',\n    preview: true,\n});\nconsole.info(`%c  ALARMO-CARD  \\n%c  Version: ${CARD_VERSION.padEnd(7, ' ')}`, 'color: orange; font-weight: bold; background: black', 'color: white; font-weight: bold; background: dimgray');\n","references":["/home/ubuntu/Documents/GitHub/alarmo-card-try/node_modules/lit/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/node_modules/lit/decorators.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/node_modules/home-assistant-js-websocket/dist/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/const.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/alarmo-card-editor.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/components/alarmo-state-badge.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/components/alarmo-sensor-badge.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/components/alarmo-button.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/components/alarmo-code-dialog.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/subscribe-mixin.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/localize/localize.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/data/entity.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/data/config.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/helpers.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/data/websockets.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/node_modules/@mdi/js/mdi.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/components/alarmo-code-dialog.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/lib/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/lib/compute-domain.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/lib/fire-event.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/alarmo-card-editor.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/components/alarmo-code-dialog.ts"]}
