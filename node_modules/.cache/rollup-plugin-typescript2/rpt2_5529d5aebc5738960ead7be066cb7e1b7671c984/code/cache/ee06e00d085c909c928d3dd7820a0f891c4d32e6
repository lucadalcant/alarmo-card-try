{"code":"import { minButtonScale, maxButtonScale } from \"../const\";\nimport { isDefined } from \"../helpers\";\nimport { computeDomain } from \"../lib/compute-domain\";\nexport const validateConfig = (config) => {\n    if (!config ||\n        !config.entity ||\n        computeDomain(config.entity) !== \"alarm_control_panel\") {\n        throw new Error(\"Invalid configuration provided for entity\");\n    }\n    else if (isDefined(config.button_scale_keypad) &&\n        (typeof config.button_scale_keypad !== \"number\" ||\n            config.button_scale_keypad < minButtonScale ||\n            config.button_scale_keypad > maxButtonScale)) {\n        throw new Error(\"Invalid configuration provided for button_scale_keypad\");\n    }\n    else if (isDefined(config.button_scale_actions) &&\n        (typeof config.button_scale_actions !== \"number\" ||\n            config.button_scale_actions < minButtonScale ||\n            config.button_scale_actions > maxButtonScale)) {\n        throw new Error(\"Invalid configuration provided for button_scale_actions\");\n    }\n};\nexport const calcStateConfig = (state, config) => {\n    let result = {\n        hide: false,\n        button_label: \"\",\n        button_icon: \"\",\n        state_label: \"\",\n    };\n    if ((config.states || {}).hasOwnProperty(state))\n        result = Object.assign(Object.assign({}, result), config.states[state]);\n    return result;\n};\n","references":["/home/ubuntu/Documents/GitHub/alarmo-card-try/src/const.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/helpers.ts","/home/ubuntu/Documents/GitHub/alarmo-card-try/src/lib/compute-domain.ts"]}
