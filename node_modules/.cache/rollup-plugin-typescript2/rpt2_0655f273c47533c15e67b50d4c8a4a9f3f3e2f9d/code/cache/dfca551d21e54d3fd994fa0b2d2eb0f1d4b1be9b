{"code":"import { ArmActions, AlarmStates } from '../const';\nimport { calcStateConfig } from './config';\nimport { isEmpty } from '../helpers';\nimport { computeDomain } from '../lib/compute-domain';\nexport const calcSupportedActions = (stateObj) => {\n    if (!stateObj)\n        return [];\n    const supportedFeatures = stateObj.attributes.supported_features || 0;\n    let actions = [];\n    if (supportedFeatures & 2)\n        actions.push(ArmActions.ArmAway);\n    if (supportedFeatures & 1)\n        actions.push(ArmActions.ArmHome);\n    if (supportedFeatures & 4)\n        actions.push(ArmActions.ArmNight);\n    if (supportedFeatures & 32)\n        actions.push(ArmActions.ArmVacation);\n    if (supportedFeatures & 16)\n        actions.push(ArmActions.ArmCustomBypass);\n    return actions;\n};\nexport const computeStateDisplay = (stateObj, localize, config) => {\n    const domain = computeDomain(stateObj.entity_id);\n    const deviceClass = stateObj.attributes.device_class;\n    const state = stateObj.state;\n    if (Object.values(AlarmStates).includes(state) && config) {\n        const stateConfig = calcStateConfig(state, config);\n        if (!isEmpty(stateConfig.state_label))\n            return stateConfig.state_label;\n    }\n    let translation = '';\n    if (deviceClass)\n        translation = localize(`component.${domain}.entity_component.${deviceClass}.state.${stateObj.state}`);\n    if (!translation)\n        translation = localize(`component.${domain}.entity_component._.state.${stateObj.state}`);\n    return translation;\n};\nexport const computeNameDisplay = (stateObj, config) => {\n    return !isEmpty(config.name) ? config.name : stateObj.attributes.friendly_name;\n};\nexport const codeRequired = (stateObj) => {\n    return stateObj.attributes.code_format !== null;\n};\nexport const computeStateColor = (stateObj) => {\n    if (!stateObj || !stateObj.state)\n        return 'var(--state-unavailable-color)';\n    const state = stateObj.state;\n    if (state == AlarmStates.Disarmed)\n        return 'var(--state-alarm_control_panel-disarmed-color, var(--state-alarm_control_panel-inactive-color, var(--state-inactive-color)))';\n    if (Object.values(AlarmStates).includes(state))\n        return `var(--state-alarm_control_panel-${state}-color, var(--state-alarm_control_panel-active-color, var(--state-active-color)))`;\n    return 'var(--disabled-color, var(--state-inactive-color))';\n};\n","references":["/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/home-assistant-js-websocket/dist/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/const.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/data/config.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/helpers.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/lib/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/lib/compute-domain.ts"]}
