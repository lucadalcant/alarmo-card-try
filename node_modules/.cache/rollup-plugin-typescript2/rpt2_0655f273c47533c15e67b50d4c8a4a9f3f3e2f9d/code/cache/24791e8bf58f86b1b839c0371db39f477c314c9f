{"code":"import { __decorate } from \"tslib\";\nimport { mdiCheck, mdiClose } from '@mdi/js';\nimport { css, html, LitElement, nothing } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { ActionToState, AlarmoEvents, ArmActions, EVENT } from '../const';\nimport { SubscribeMixin } from '../subscribe-mixin';\nconst BUTTONS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'clear', 'submit'];\nlet AlarmoCodeDialog = class AlarmoCodeDialog extends SubscribeMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        this._input = '';\n        this._showClearButton = false;\n        this._narrow = false;\n        this._codeClearTimer = 0;\n        this.createCloseHeading = (hass, title) => {\n            var _a;\n            return html `\n    <div class=\"header_title\">\n      <ha-icon-button\n        .label=${(_a = hass === null || hass === void 0 ? void 0 : hass.localize('ui.common.close')) !== null && _a !== void 0 ? _a : 'Close'}\n        .path=${mdiClose}\n        dialogAction=\"close\"\n        class=\"header_button\"\n      ></ha-icon-button>\n      <span>${title}</span>\n    </div>\n  `;\n        };\n    }\n    hassSubscribe() {\n        return [\n            this.hass.connection.subscribeMessage((ev) => this._fetchData(ev), { type: EVENT }),\n        ];\n    }\n    async _fetchData(ev) {\n        var _a;\n        if (ev.data.area_id !== ((_a = this._params) === null || _a === void 0 ? void 0 : _a.area_id))\n            return;\n        switch (ev.data.event) {\n            case AlarmoEvents.Disarm:\n                this._confirm(ev.data.event);\n                break;\n            case AlarmoEvents.Arm:\n                this._confirm(ev.data.event);\n                break;\n            case AlarmoEvents.Trigger:\n                this._confirm(ev.data.event);\n                break;\n            case AlarmoEvents.InvalidCodeProvided:\n            case AlarmoEvents.NoCodeProvided:\n                this._showCodeError();\n                break;\n            case AlarmoEvents.FailedToArm:\n                this._confirm(ev.data.event);\n                break;\n            case AlarmoEvents.CommandNotAllowed:\n                this._confirm(ev.data.event);\n                break;\n            case AlarmoEvents.TriggerTimeExpired:\n                break;\n            case AlarmoEvents.ReadyToArmModesChanged:\n                break;\n        }\n    }\n    shouldUpdate(changedProps) {\n        const oldHass = changedProps.get('hass');\n        if (changedProps.has('_params') || !this._params)\n            return true;\n        else if (changedProps.has('_input'))\n            return true;\n        else if (!oldHass)\n            return true;\n        else if (oldHass.states[this._params.entity_id] !== this.hass.states[this._params.entity_id]) {\n            const oldState = oldHass.states[this._params.entity_id];\n            const newState = this.hass.states[this._params.entity_id];\n            //this.processStateUpdate(oldState, newState);\n            return true;\n        }\n        return false;\n    }\n    // private processStateUpdate(_oldState: AlarmoEntity, _newState: AlarmoEntity) {\n    //   //console.log(`state changed: ${oldState.state} -> ${newState.state}`);\n    // }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.addEventListener('keypress', (ev) => {\n            if (ev.key === 'Enter' && this._input.length) {\n                this._submit();\n            }\n        });\n    }\n    async showDialog(dialogParams) {\n        this._params = dialogParams;\n        this._input = '';\n        this._narrow = matchMedia('all and (max-width: 450px), all and (max-height: 500px)').matches;\n        await this.updateComplete;\n    }\n    closeDialog() {\n        this._params = undefined;\n        this._showClearButton = false;\n        return true;\n    }\n    _showCodeError() {\n        var _a;\n        const inputField = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('#code');\n        if (inputField) {\n            inputField.classList.remove('error');\n            inputField.classList.add('error');\n            inputField.invalid = true;\n        }\n    }\n    _clearCodeError() {\n        var _a;\n        const inputField = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('#code');\n        if (inputField && inputField.classList.contains('error')) {\n            inputField.classList.remove('error');\n            inputField.invalid = false;\n            this._input = '';\n            this._cancelCodeClearTimer();\n        }\n    }\n    _clearCode() {\n        this._input = '';\n        this._clearCodeError();\n        this._cancelCodeClearTimer();\n    }\n    _setCodeClearTimer() {\n        this._cancelCodeClearTimer();\n        if (this._input.length) {\n            this._codeClearTimer = window.setTimeout(() => {\n                this._clearCode();\n            }, 120000); //clear code after 120 sec inactivity\n        }\n    }\n    _cancelCodeClearTimer() {\n        if (this._codeClearTimer) {\n            clearTimeout(this._codeClearTimer);\n        }\n    }\n    _submit() {\n        var _a;\n        const code = (_a = this._input) !== null && _a !== void 0 ? _a : '';\n        this._clearCodeError();\n        if (this._params.action == ArmActions.Disarm) {\n            this.hass.callService('alarmo', 'disarm', {\n                entity_id: this._params.entity_id,\n                code: code,\n            });\n        }\n        else {\n            this.hass.callService('alarmo', 'arm', Object.assign(Object.assign({}, this._params.armOptions), { entity_id: this._params.entity_id, mode: ActionToState[this._params.action], code: code }));\n        }\n    }\n    _confirm(ev) {\n        var _a, _b;\n        (_b = (_a = this._params) === null || _a === void 0 ? void 0 : _a.confirm) === null || _b === void 0 ? void 0 : _b.call(_a, ev);\n        this.closeDialog();\n    }\n    _cancel() {\n        var _a, _b;\n        (_b = (_a = this._params) === null || _a === void 0 ? void 0 : _a.cancel) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.closeDialog();\n    }\n    _numberClick(e) {\n        const val = e.currentTarget.value;\n        this._clearCodeError();\n        this._setCodeClearTimer();\n        this._input = this._input + val;\n        this._showClearButton = true;\n    }\n    _clear() {\n        this._input = '';\n        this._showClearButton = false;\n    }\n    render() {\n        if (!this._params || !this.hass) {\n            return nothing;\n        }\n        const isText = this._params.code_format === 'text';\n        if (isText) {\n            return html `\n        <ha-dialog open @closed=${this._cancel} .heading=${this.hass.localize('ui.dialogs.enter_code.title')}>\n          <ha-textfield\n            class=\"input\"\n            ?dialogInitialFocus=${!this._narrow}\n            .value=${this._input}\n            id=\"code\"\n            .label=${this.hass.localize('ui.dialogs.enter_code.input_label')}\n            type=\"password\"\n            inputmode=\"text\"\n            @input=${(ev) => {\n                this._clearCodeError();\n                this._input = ev.target.value;\n                this._setCodeClearTimer();\n            }}\n            @focus=${this._clearCodeError}\n          ></ha-textfield>\n          <ha-button slot=\"secondaryAction\" dialogAction=\"cancel\">\n            ${this.hass.localize('ui.common.cancel')}\n          </ha-button>\n          <ha-button @click=${this._submit} slot=\"primaryAction\"> ${this.hass.localize('ui.common.submit')} </ha-button>\n        </ha-dialog>\n      `;\n        }\n        return html `\n      <ha-dialog\n        open\n        .heading=${this.createCloseHeading(this.hass, this.hass.localize('ui.dialogs.enter_code.title'))}\n        @closed=${this._cancel}\n        hideActions\n      >\n        <div class=\"container\">\n          <ha-textfield\n            class=\"input\"\n            ?dialogInitialFocus=${!this._narrow}\n            .value=${this._input}\n            id=\"code\"\n            .label=${this.hass.localize('ui.dialogs.enter_code.input_label')}\n            type=\"password\"\n            inputmode=\"numeric\"\n            @input=${(ev) => {\n            this._clearCodeError();\n            this._input = ev.target.value;\n            this._setCodeClearTimer();\n        }}\n            @focus=${this._clearCodeError}\n          ></ha-textfield>\n          <div class=\"keypad\">\n            ${BUTTONS.map((value) => value === ''\n            ? html `<span></span>`\n            : value === 'clear'\n                ? html `\n                      <ha-control-button\n                        @click=${this._clear}\n                        class=\"clear\"\n                        .disabled=${!this._showClearButton}\n                        .label=${this.hass.localize('ui.common.clear')}\n                      >\n                        <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n                      </ha-control-button>\n                    `\n                : value === 'submit'\n                    ? html `\n                        <ha-control-button\n                          @click=${this._submit}\n                          class=\"submit\"\n                          .label=${this.hass.localize('ui.common.submit')}\n                        >\n                          <ha-svg-icon path=${mdiCheck}></ha-svg-icon>\n                        </ha-control-button>\n                      `\n                    : html `\n                        <ha-control-button .value=${value} @click=${this._numberClick} .label=${value}>\n                          ${value}\n                        </ha-control-button>\n                      `)}\n          </div>\n        </div>\n      </ha-dialog>\n    `;\n    }\n};\nAlarmoCodeDialog.styles = css `\n    ha-dialog {\n      /* Place above other dialogs */\n      --dialog-z-index: 104;\n    }\n    ha-textfield {\n      width: 100%;\n      max-width: 240px;\n      margin: 0px auto;\n      text-align: center;\n      margin-left: calc(50% - 240px / 2);\n      margin-bottom: 18.5px;\n    }\n    ha-textfield.error {\n      animation: shake 0.2s ease-in-out 0s 2;\n      margin-bottom: 0px;\n    }\n    @keyframes shake {\n      0% {\n        margin-left: calc(50% - 240px / 2);\n      }\n      25% {\n        margin-left: calc(50% - 240px / 2 + 10px);\n      }\n      75% {\n        margin-left: calc(50% - 240px / 2 - 10px);\n      }\n      100% {\n        margin-left: calc(50% - 240px / 2);\n      }\n    }\n    .container {\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n    }\n    .keypad {\n      --keypad-columns: 3;\n      margin-top: 12px;\n      padding: 12px;\n      display: grid;\n      grid-template-columns: repeat(var(--keypad-columns), auto);\n      grid-auto-rows: auto;\n      grid-gap: 24px;\n      justify-items: center;\n      align-items: center;\n    }\n    .clear {\n      grid-row-start: 4;\n      grid-column-start: 0;\n    }\n    @media all and (max-height: 450px) {\n      .keypad {\n        --keypad-columns: 6;\n      }\n      .clear {\n        grid-row-start: 1;\n        grid-column-start: 6;\n      }\n    }\n\n    ha-control-button {\n      width: 56px;\n      height: 56px;\n      --control-button-border-radius: 28px;\n      --mdc-icon-size: 24px;\n      font-size: 24px;\n    }\n    .submit {\n      --control-button-background-color: var(--green-color);\n      --control-button-icon-color: var(--green-color);\n    }\n    .clear {\n      --control-button-background-color: var(--red-color);\n      --control-button-icon-color: var(--red-color);\n    }\n    .hidden {\n      display: none;\n    }\n    .buttons {\n      margin-top: 12px;\n    }\n  `;\n__decorate([\n    property({ attribute: false })\n], AlarmoCodeDialog.prototype, \"hass\", void 0);\n__decorate([\n    state()\n], AlarmoCodeDialog.prototype, \"_params\", void 0);\n__decorate([\n    state()\n], AlarmoCodeDialog.prototype, \"_input\", void 0);\n__decorate([\n    state()\n], AlarmoCodeDialog.prototype, \"_showClearButton\", void 0);\n__decorate([\n    state()\n], AlarmoCodeDialog.prototype, \"_narrow\", void 0);\nAlarmoCodeDialog = __decorate([\n    customElement('alarmo-code-dialog')\n], AlarmoCodeDialog);\nexport { AlarmoCodeDialog };\n","references":["/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/@mdi/js/mdi.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/lit/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/lit/decorators.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/home-assistant-js-websocket/dist/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/const.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/subscribe-mixin.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/lib/types.ts"]}
