{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { computeStateDisplay } from '../data/entity';\nimport { NumberFormat } from '../lib/types';\nimport { computeEntity } from '../lib/compute-entity';\nimport { fireEvent } from '../lib/fire-event';\nclass AlarmoSensorBadge extends LitElement {\n    shouldUpdate(changedProps) {\n        const oldHass = changedProps.get('hass');\n        if (!oldHass)\n            return true;\n        if (this.entity && oldHass.states[this.entity] !== this.hass.states[this.entity])\n            return true;\n        return false;\n    }\n    render() {\n        if (!this.hass || !this.entity)\n            return html ``;\n        const validEntity = this.entity in this.hass.states;\n        let stateObj = Object.assign({}, this.hass.states[this.entity]);\n        if (this.state !== undefined)\n            stateObj = Object.assign(Object.assign({}, stateObj), { state: this.state });\n        const value = validEntity\n            ? computeStateDisplay(stateObj, this.hass.localize)\n            : this.hass.localize('state.default.unavailable', this.hass.locale || { language: this.hass.language, number_format: NumberFormat.language });\n        const name = validEntity ? stateObj.attributes.friendly_name || computeEntity(stateObj.entity_id) : this.entity;\n        let binaryState = this.state ? true : stateObj.state == 'on';\n        return html `\n      <div class=\"badge-container\" @click=${() => fireEvent(this, 'hass-more-info', { entityId: this.entity })}>\n        <div class=\"label-badge ${binaryState ? 'active' : ''}\" id=\"badge\">\n          <div class=\"value\">\n            <ha-state-icon .hass=${this.hass} .stateObj=${stateObj}></ha-state-icon>\n            <div class=\"label\">\n              <span>${value}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"title\">${name}</div>\n      </div>\n    `;\n    }\n    static get styles() {\n        return css `\n      .badge-container {\n        display: inline-block;\n        text-align: center;\n        vertical-align: top;\n        padding: var(--ha-label-badge-padding, 0 0 0 0);\n        cursor: pointer;\n      }\n      .label-badge {\n        position: relative;\n        display: block;\n        margin: 0 auto;\n        width: var(--ha-label-badge-size, 2.5em);\n        text-align: center;\n        height: var(--ha-label-badge-size, 2.5em);\n        line-height: var(--ha-label-badge-size, 2.5em);\n        font-size: var(--ha-label-badge-font-size, 1.5em);\n        border-radius: 50%;\n        border: 0.1em solid var(--primary-color);\n        color: var(--label-badge-text-color, rgb(76, 76, 76));\n        white-space: nowrap;\n        background-color: none;\n        background-size: cover;\n        transition: border 0.3s ease-in-out;\n      }\n      .label-badge.active {\n        border: 0.1em solid var(--label-badge-red);\n      }\n      .label-badge .value {\n        font-size: 90%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .label-badge .label {\n        position: absolute;\n        bottom: -1em;\n        left: -0.2em;\n        right: -0.2em;\n        line-height: 1em;\n        font-size: 0.5em;\n      }\n      .label-badge .label span {\n        box-sizing: border-box;\n        max-width: 100%;\n        display: inline-block;\n        background-color: var(--primary-color);\n        color: var(--ha-label-badge-label-color, white);\n        border-radius: 1em;\n        padding: 9% 16% 8% 16%;\n        font-weight: 500;\n        overflow: hidden;\n        text-transform: uppercase;\n        text-overflow: ellipsis;\n        transition: background-color 0.3s ease-in-out;\n        text-transform: var(--ha-label-badge-label-text-transform, uppercase);\n      }\n      .label-badge.active .label span {\n        background-color: var(--label-badge-red);\n      }\n      .badge-container .title {\n        margin-top: 1em;\n        font-size: var(--ha-label-badge-title-font-size, 0.9em);\n        width: var(--ha-label-badge-title-width, 5em);\n        font-weight: var(--ha-label-badge-title-font-weight, 400);\n        overflow: hidden;\n        text-overflow: ellipsis;\n        line-height: normal;\n      }\n    `;\n    }\n}\n__decorate([\n    property()\n], AlarmoSensorBadge.prototype, \"hass\", void 0);\n__decorate([\n    property()\n], AlarmoSensorBadge.prototype, \"entity\", void 0);\n__decorate([\n    property()\n], AlarmoSensorBadge.prototype, \"state\", void 0);\ncustomElements.define('alarmo-sensor-badge', AlarmoSensorBadge);\n","references":["/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/lit/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/lit/decorators.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/node_modules/home-assistant-js-websocket/dist/index.d.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/data/entity.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/lib/types.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/lib/compute-entity.ts","/home/ubuntu/Documents/GitHub/alarmo-card/src/lib/fire-event.ts"]}
